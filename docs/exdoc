#!/usr/bin/perl

if ($ARGV[0] eq "-h"){
    $sourcedir = $ARGV[1];
    $dir = $sourcedir;
    $html = 1;
    shift @ARGV;
    shift @ARGV;
}

if ($ARGV[0] eq "-t"){
    $dir = $ARGV[1];
    shift @ARGV;
}

if ($html){
    opendir (D, "$sourcedir/sources/") || die "Can not open $dir";
    while ($n = readdir (D)){
	if ($n =~ /mono-api-.*\.html$/){
	    open (IN, "$sourcedir/sources/$n") || die "Can not open $n";
	    $files[$filecount] = $n;
	    while (<IN>){
		@files_content[$filecount] .= $_;
		if (/name="api:(.*?)"/){
		    $_ =~ s/.*name="api:(\w+?)".*/\1/;
		    $apis[$filecount] .= "$_";
		}
	    }
	    $filecount++;
	    close IN;
	}
    }
}

while (<ARGV>){
	if (/\/\*\* *\n/){
		&process_doc;
	} else {
		#print "IGNORING: $_";
	}
}

if ($html){
    for ($f = 0; $f < $filecount; $f++){
	$name = $files[$f];
	open (OUT, "> $dir/html/$name") || die "Can not create $dir/html/$name";
	print "Merging: $name\n";
	print OUT<<EOF;
<?xml version="1.0" encoding="utf-8"?>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>$name</title>
    <style type="text/css">
    body {
	line-height: 1.5;
	padding-left: 2em;
	padding-right: 2em;
    }
    body code {
        font-family: "Consolas", "Courier", monospace;
        border: 1px solid rgba(214,214,214,1);
	background-color: rgba(249,249,249,1);
	padding-left: 3px;
	padding-right: 3px;
    }

    .api-entry code {
        border: none;
        background-color: transparent;
    }
    h3 { 
    }
    
    .api-parameters {
        border-collapse: collapse;
        border-spacing: 0;
        empty-cells: hide;
        border: 0;
        margin: 5px 0 26px;	    
    }

    .api-parameters td {
        border: 1px solid rgba(214,214,214,1);
	  border-left-style: none;
	padding: 5px 25px 5px 10px;
    }

    .api-parameters tr>td:last-child  {
        border-right: 0;
    }
	
    .api-parameters td:first-of-type {
        text-align: right;
        padding: 7px;
        vertical-align: top;
        word-break: normal;
        width: 40px;
    }

    .api-parameters tr:last-child>td {
        border-bottom: 0;
    }

    .api-parameters tr:first-child>td {
        border-top: 0;
    }

    .api-parameters tr td:first-of-type {
        text-align: right;
        padding: 7px;
        vertical-align: top;
        word-break: normal;
        width: 40px;
    }

   .api {
        left: -25px;
        margin: 0;
        padding: 13px 25px 0;
        position: relative;
        width: 100%;
    } 

    .api-description {
        background: rgba(249,249,249,1);
        border-bottom: 1px solid rgba(233,233,233,1);
        left: -25px;
        margin: 0;
        padding: 13px 25px 0;
        position: relative;
        width: 100%;	 
    }

     .api-entry {
         background: transparent;
     }

     .api-docs {
     }
	
     .prototype {
         border-left: 5px solid rgba(205,233,244,1);
         padding: .5em;
         margin-top: 5pt;
         margin-bottom: 5pt;
         font-family: "Consolas", "Courier", monospace;
         display: block;
         overflow: auto;
         background-color: #f9f9f9;
    } 

    .header {
        padding: 0 0 5pt 5pt;
        margin: 10pt;
	white-space: pre;
        font-family: monospace;
	border: 1px solid rgba(233,233,233,1);
    }
    
    .code {
        border: 1px solid;
	padding: 0 0 5pt 5pt;
	margin: 10pt;
	white-space: pre;
	font-family: monospace;
    }

    .declaration {
	margin-top: 21px;
    }

    .api-section {
        font-size: smaller;
	font-weight: bold;
	margin-top: 21px;
	line-height: 1.5;
    }
	
    .strike {
        text-decoration: line-through;
    }

    .deprecated {
        color: red;
    }

    .api-ptr-container {
        background: white;
	border-bottom: 1px solid rgba(233,233,233,1);
        left: -25px;
        padding-left: 25px;
        padding-right: 25px;
        padding-bottom: 13px;
        position: relative;
        width: 100%;
    }

    .api-ptr {
        background: rgba(249,249,249,1);
	border-left: 1px solid rgba(233,233,233,1);
	border-top: 1px solid rgba(233,233,233,1);
        height: 12px;
        left: 37px;
        top: -7px;
        -webkit-transform: rotate(45deg);
        -moz-transform: rotate(45deg);
        -o-transform: rotate(45deg);
        transform: rotate(45deg);
        position: absolute;
        width: 12px;
    }

    .api-height-container {
        height: 0;
        left: -25px;
        padding: 0 25px;
        position: relative;
        width: 100%;
    }
	
   </style>
</head>
<body>
<div class="api-docs">
EOF
	@a = split (/\n/, $files_content[$f]);
	$strikeextra = "";
	for ($ai = 0; $ai < $#a; $ai++){
	    $line = $a[$ai];
	    
	    ($api,$caption) = $line =~  /<h4><a name=\"api:(\w+)\">(\w+)<\/a><\/h4>/;
	    if ($api ne ""){
		if ($api_shown == 1){
		    print OUT "</div>";
		    if ($deprecated{$api}){
			$strike = "strike";
			$strikeextra = "</div><br><div class='deprecated'><b>Deprecated:</b> " . $deprecated{$api};
		    } else {
			$strike = "";
			$strikeextra = "";
		    }
		}
		$api_shown = 1;
		$proto = $prototype{$api};
		if ($proto eq ""){
		    $proto = "Prototype: $api";
		}

                print OUT<<EOF;
 <a name="api:$api"></a>
 <div class="api">
 <div class="api-entry $strike"><code>$api$strikeextra</code></div>
 <div class="api-height-container">
    <div class="api-ptr-container"></div>
    <div class="api-description">
    <div class="api-ptr"></div>

      <div class="declaration api-section">Syntax</div>
      <div class="prototype">$proto</div>
<p>
EOF

#		if ($arguments{$api} ne "" && (!($arguments{$api}) =~ /^[ \t]+$/)){
		    print OUT "<div class=\"api-section\">Parameters</div>\n";
		    print OUT "<table class=\"api-parameters\"><tbody>".${arguments{$api}}."</tbody></table>";
#	        }
#		&opt_print ("Parameters", $arguments{$api}, 1);
	    
		&opt_print ("Returns", $returns{$api}, 1);
		&opt_print ("Description", $bodies{$api}, 0);
		print OUT "\n";
	    } else {
		if ($line =~ /@API_IDX@/){
		    $apis_toc = &create_toc ($apis[$f]);
		    $line =~ s/\@API_IDX\@/$apis_toc/;
		}
		if ($line =~ /^<h4/){
		    print OUT "</div></div></div>";
		    $api_shown = 0;
		}
		if ($line =~ /`/){
		}
		print OUT "$line\n";
	    }
	}
	print OUT<<EOF;
   </div>
</body>
</html>
EOF
	close OUT;
	system ("$ENV{runtimedir}/mono-wrapper convert.exe $dir/html/$name $dir/html/x-$name");

	# clean up the mess that AgilityPack does, it CDATAs our CSS
	open HACK, "$dir/html/x-$name" || die "Could not open $dir/html/x-$name";
	open HACKOUT, ">$dir/deploy/$name" || die "Could not open output";

	while (<HACK>){
	    s/^\/\/<!\[CDATA\[//;
	    s/^\/\/\]\]>\/\///;
	    print HACKOUT $_;
	}
	#system ("cp.exe $dir/html/$name $dir/deploy/$name");
    }
}

sub process_doc {
	$doc = "";
	$func = <>;
	chop $func;
	$func =~ s/^ \* //;
	$func =~ s/:$//;
	print "Function: $func\n" if (!$html);
	$args = "";
	$inbody = 0;
	$returns = "";
	$body = "";
	$functions[$fn++] = $func;
	$deprecated = 0;
	
	# Process arguments
	while (<>){
	    s/NULL/<code>NULL<\/code>/g;
	    s/TRUE/<code>TRUE<\/code>/g;
	    s/FALSE/<code>FALSE<\/code>/g;
	    if (/^ \*\*?\//){
		    $body =~ s/@(\w+)/<i>\1<\/i>/g;
		    $returns =~ s/@(\w+)/<i>\1<\/i>/g;
		    $args =~ s/@(\w+)/<i>\1<\/i>/g;

		    $body =~ s/#(\w+)/<code>\1<\/code>/g;
		    $returns =~ s/#(\w+)/<code>\1<\/code>/g;
		    $args =~ s/#(\w+)/<code>\1<\/code>/g;

		    $returns =~ s/\`([:\w\*]+)\`/<code>\1<\/code>/g;
		    $args =~ s/\`([:\w\*]+)\`/<code>\1<\/code>/g;
		    $body =~ s/\`([:\w\*]+)\`/<code>\1<\/code>/g;
		    
		    $body =~ s/\n/ /;
		    $bodies{$func} = $body;
		    $arguments{$func} = $args;
		    $deprecated{$func} = $deprecated;
		    $returns{$func} = $returns;
		    $proto = "";
		    while (<>){
			$proto .= $_;
			last if (/\{/);
		    }
		    $proto =~ s/{//;
		    # clean it up a little, remove newlines, empty space at end
		    $proto =~ s/ +$//;
		    # Turn "Type * xxx" into "Type* xxx"
		    $proto =~ s/^(\w+)\W+\*/\1\*/;
		    $prototype{$func} = $proto;
		    return;
		}
		chop;
		s/^\ \*//;
		$_ = "\n<p>" if (/^\s+$/);
				
		if ($inbody == 0){
		    if (/\s*(\w+):(.*)/){
			if ($1 eq "deprecated"){
			    $deprecated = $2;
			} else {
			    #$args .= "<dt><i>$1:</i></dt><dd>$2</dd>";
			    $args .= "<tr><td><i>$1</i><td>$2</td></td></tr>";
			}
		    } else {
			
			$body = "\t$_\n";
			$inbody = 1;
		    }
		} elsif ($inbody == 1) {
		    if (/Returns?:/){
			s/Returns?://;
			$returns = "\t$_\n";
			$inbody = 2;
		    } else {
			$body .= "\n\t$_";
		    }
		} else {
		    $returns .= "\n\t$_";
		}
		   
	}
}

sub create_toc {
    my ($apis_listed) = @_;
    my $type_size = 0;
    my $name_size = 0;
    my $ret, $xname, $args, $line;
    $apis_toc = "";


    # Try to align things, so compute type size, method size, and arguments
    foreach $line (split /\n/, $apis_listed){
	$p = $prototype{$line};
	($ret, $xname, $args) = $p =~ /(.*)\n(\w+)[ \t](.*)/;
	$tl = length ($ret);
	$pl = length ($xname);

	$type_size = $tl if ($tl > $type_size);
	$name_size = $pl if ($pl > $name_size);
    }

    $type_size++;
    $name_size++;

    foreach $line (split /\n/, $apis_listed){
	chop;
	$p = $prototype{$line};
	($ret, $xname, $args) = $p =~ /(.*)\n(\w+)[ \t](.*)/;
	
	$rspace = " " x ($type_size - length ($ret));
	$nspace = " " x ($name_size - length ($xname));
	$args = &format ($args, length ($ret . $rspace . $xname . $nspace), 60);
	$apis_toc .= "$ret$rspace<a href=\"\#api:$line\">$xname</a>$nspace$args\n";
    }
    return $apis_toc;
}

#
# Formats the rest of the arguments in a way that will fit in N columns
#
sub format {
    my ($args, $size, $limit) = @_;
    my $sret = "";

#    return $args if ((length (args) + size) < $limit);
    
    $remain = $limit - $size;
    @sa = split /,/, $args;
    $linelen = $size;
    foreach $arg (@sa){
	if ($sret eq ""){
	    $sret = $arg . ", ";
	    $linelen += length ($sret);
	} else {
	    if ($linelen + length ($arg) < $limit){
		$sret .= "FITS" . $arg . ", ";
	    } else {
		$newline = " " x ($size) . $arg . ", ";
		$linelen = length ($newline);
		$sret .= "\n" . $newline;
	    }
	}
    }
    $sret =~ s/, $/;/;
    return $sret;
}

sub opt_print {
    my ($caption, $opttext, $quote) = @_;

    if ($opttext ne "" && (!($opttext =~ /^[ \t]+$/))){
	print OUT "<div class=\"api-section\">$caption</div>\n";
	if ($quote == 1){
	    print OUT "<blockquote>$opttext</blockquote>\n";
	} else {
	    print OUT "<p>$opttext\n";
	}
    }
}
