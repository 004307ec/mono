#!/bin/bash
#
# mono-find-requires
#
# Authors:
#       Ben Maurer (bmaurer@ximian.com)
#
# (C) 2005 Novell (http://www.novell.com)
#

IFS=$'\n'
filelist=($(grep -Ev '/usr/doc/|/usr/share/doc/'))
monolist=($(printf "%s\n" "${filelist[@]}" | egrep "\\.(exe|dll)\$"))

a=`which "$0"`
d=`dirname "$a"`

# Set the prefix, unless it is overriden (used when building mono rpms)
: ${prefix=$d/..}

exec_prefix=$d/..
libdir=$prefix/@reloc_libdir@
bindir=$d

# Bail out if monodis or libmono is missing
if [ ! -x $bindir/monodis ] || [ ! -f $libdir/libmono.so ] ; then
	echo "monodis missing or unusable, exiting..."
	exit 1
fi


# set LD_LIBRARY_PATH to ensure that libmono.so is found
export LD_LIBRARY_PATH=$libdir${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}

REQUIRES=$(
	for i in "${monolist[@]}"; do
		($bindir/monodis --assemblyref $i | awk '
			BEGIN { START=0; LIBNAME=""; VERSION=""; }
			(START==0) && /^[0-9]+: Version=/ {
				START=1;
				sub(/Version=/, "", $2);
				VERSION=$2
			}

			(START==1) && /^\tName=/ {
				sub(/Name=/, "", $1);
				LIBNAME=$1
				# Allow rpm deps to be resolved for 1.0 profile version
				if (VERSION=="1.0.3300.0")
					OP=">="
				else
					OP="="
				print "mono(" LIBNAME ") " OP " " VERSION
				START=0
			}
		    ') 2> /dev/null
	done
)

PROVIDES=$(
	for i in "${monolist[@]}"; do
		($bindir/monodis --assembly $i | awk '
			BEGIN { LIBNAME=""; VERSION=""; }
			/^Version:/ { VERSION=$2 }
			/^Name:/    { LIBNAME=$2 }
			END {
				if (VERSION && LIBNAME)
					print "mono(" LIBNAME ") = " VERSION
			}
		    ') 2>/dev/null
	done
)
#
# This is a little magic trick to get all REQUIRES that are not
# in PROVIDES. While RPM functions correctly when such deps exist,
# they make the metadata a bit bloated.
#

# Filter out dups from both lists
REQUIRES=$(echo "$REQUIRES" | sort | uniq)
PROVIDES=$(echo "$PROVIDES" | sort | uniq)

#
# Get a list of elements that exist in exactly one of PROVIDES or REQUIRES
#
UNIQ=$(echo "$PROVIDES
$REQUIRES" | sort | uniq -u)

#
# Of those, only choose the ones that are in REQUIRES
#
echo "$UNIQ
$REQUIRES" | sort | uniq -d
