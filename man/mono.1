.\" 
.\" mono manual page.
.\" (C) 2003 Ximian, Inc. 
.\" Author:
.\"   Miguel de Icaza (miguel@gnu.org)
.\"
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.TH Mono "Mono 1.0"
.SH NAME
mono \- Mono's code ECMA-CLI code generator (Just-in-Time and Ahead-of-Time)
.SH SYNOPSIS
.PP
.B mono [options] file [arguments...]
.SH DESCRIPTION
\fImono\fP is a runtime implementation of the ECMA Common Language
Infrastructure.  This can be used to run ECMA and .NET applications.
.PP
The runtime contains a native code generator that transforms the
Common Intermediate Language into native code.
.PP
The code generator can operate in two modes: just in time compilation
(JIT) or ahead of time compilation (AOT).  Since code can be
dynamically loaded, the runtime environment and the JIT are always
present, even if code is compiled ahead of time.
.PP
The runtime loads ths specified
.I file
and optionally passes
the
.I arguments
to it.  The 
.I file
is an ECMA assembly.  They typically have a .exe or .dll extension.
.PP
The runtime provides a number of configuration options for running
applications, for developping and debugging, and for testing and
debugging the runtime itself.
.SH RUNTIME OPTIONS
The following options are available:
.TP
.I "--aot"
This option is used to precompile the CIL code in the specified
assembly to native code.  The generated code is stored in a file with
the extension .so.  This file will be automatically picked up by the
runtime when the assembly is executed.  
.Sp
This pre-compiles the methods, but the original assembly is still
required to execute as this one contains the metadata and exception
information which is not availble on the generated file.  When
precompiling code, you might want to compile with all optimizations
(-O=all).  Pre-compiled code is position independent code.
.Sp
Pre compilation is just a mechanism to reduce startup time, and avoid
just-in-time compilation costs.  The original assembly must still be
present, as the metadata is contained there.
.TP
.I "--config filename"
Load the specified configuration file instead of the default one(s).
The default files are /etc/mono/config and ~/.mono/config or the file
specified in the MONO_CONFIG environment variable, if set.  See the
mono-config(5) man page for details on the format of this file.
.TP
.I "--help", "-h"
Displays usage instructions.
.TP
.I "--optimize=MODE", "-O=mode"
MODE is a comma separated list of optimizations.  They also allow
optimizations to be turned off by prefixing the optimization name with
a minus sign.
.Sp
The following optimizations are implemented:
.nf
             all        Turn on all optimizations
             peephole   Peephole postpass
             branch     Branch optimizations
             inline     Inline method calls
             cfold      Constant folding
             consprop   Constant propagation
             copyprop   Copy propagation
             deadce     Dead code elimination
             linears    Linear scan global reg allocation
             cmov       Conditional moves
             shared     Emit per-domain code
             sched      Instruction scheduling
             intrins   Intrinsic method implementations
             tailc      Tail recursion and tail calls
             loop       Loop related optimizations
.fi
.Sp
For example, to enable all the optimization but dead code
elimination and inlining, you can use:
.nf
	-O=all,-deadce,-inline
.fi
.SH DEVELOPMENT OPTIONS
.TP
.I "--break method"
Inserts a breakpoint before the method whose name is `method'
(namespace.class:methodname).  Use `Main' as method name to insert a
breakpoint on the application's main method.
.TP
.I "--breakonex"
Inserts a breakpoint on exceptions.  This allows you to debug your
application with a native debugger when an exception is thrown.
.TP
.I "--coverage"
Performs coverage analysis on the underlying IL code.
.TP
.I "--trace"
Shows method names as they are invoked.



.SH DEVELOPMENT OPTIONS
The following options are used to debug a JITed application.  They're
only useful when running the JIT in a debugger:
.TP
.I "--debug"
Turns on the debugging mode in the runtime.  If an assembly was
compiled with debugging information, it will produce line number
information for stack traces. 
.TP
.I "--profile"
Instructs the runtime to collect profiling information about execution
times and memory allocation, and dump it at the end of the execution.



.SH MAINTAINER OPTIONS
The maintainer options are only used by those developing the runtime
itself, and not typically of interest to runtime users or developers.
.TP
.I "--compile name"
This compiles a method (namespace.name:methodname), this is used for
testing the compiler performance or to examine the output of the code
generator. 
.TP
.I "--compileall"
Compiles all the methods in an assembly.  This is used to test the
compiler performance or to examine the output of the code generator
.TP 
.I "--graph=TYPE METHOD"
This generates a postscript file with a graph with the details about
the specified method (namespace.name:methodname).  This requires `dot'
and ghostview to be installed (it expects Ghostview to be called
"gv"). 
.TP
The following graphs are available:
.nf
          cfg        Control Flow Graph (CFG)
          dtree      Dominator Tree
          code       CFG showing code
          ssa        CFG showing code after SSA translation
          optcode    CFG showing code after IR optimizations
.fi
.Sp
Some graphs will only be available if certain optimizations are turned
on.
.TP
.I "--ncompile"
Instruct the runtime on the number of times that the method specified
by --compile (or all the methods if --compileall is used) to be
compiled.  This is used for testing the code generator performance. 
.TP
.I "-v", "--verbose"
Increases the verbosity level, each time it is listed, increases the
verbosity level to include more information.
.TP
.I "-V", "--version"
Prints JIT version information.


.SH ENVIRONMENT VARIABLES
.TP
.I "GC_DONT_GC"
Turns off the garbage collection in Mono.  This should be only used
for debugging purposes
.TP
.I "MONO_PATH"
Provides a search path to the runtime where to look for library files.
Directories are separated by the platform path separator (colons on unix). Example:
.B /home/username/lib:/usr/local/mono/lib
.TP
.I "MONO_DISABLE_SHM"
If this variable is set, it disables the Windows I/O Emulation layer,
and handles (files, events, mutexes, pipes) will not be shared across
processes.  This option is only available on Unix.
.TP
.I "MONO_CFG_DIR"
If set, this variable overrides the default system configuration directory
($PREFIX/etc). It's used to locate machine.config file.
.TP
.I "MONO_CONFIG"
If set, this variable overrides the default runtime configuration file
($PREFIX/etc/mono/config). The --config command line options overrides the
environment variable.
.SH FILES
On Unix assemblies are loaded from the installation lib directory.  If you set
`prefix' to /usr, the assemblies will be located in /usr/lib.  On
Windows, the assemblies are loaded from the directory where mono and
mint live.
.PP
/etc/mono/config, ~/.mono/config
.PP
Mono runtime configuration file.  See the mono-config(5) manual page
for more information.
.SH MAILING LISTS
Visit http://mail.ximian.com/mailman/mono-list for details.
.SH WEB SITE
Visit: http://www.go-mono.com for details
.SH SEE ALSO
.BR mcs(1), mint(1), monodis(1), mono-config(5)


