//
// Error.play
//
// Authors:
//	Marek Safar  <marek.safar@gmail.com>
//
// Copyright 2013 Zynga Inc.
// Copyright (C) 2013 Xamarin, Inc (http://www.xamarin.com)
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//

package {

	public dynamic class Error extends System.Exception
	{
		private var error_id : int;

		public function Error (message:String = "", id:int = 0)
		{
			super (message);
			error_id = id;
		}

		public function get errorID () : int
		{
			return error_id;
		}

		public function get message () : String
		{
			return Message;
		}

		public function set message (value:String): void
		{
			throw new System.NotImplementedException();
		}

		public function get name () : String
		{
			return GetType().Name;
		}

		public function set name (value:String): void
		{
			throw new System.NotImplementedException();
		}

		public function getStackTrace () : String
		{
			return StackTrace;
		}

		public static function getErrorMessage (index:int) : String
		{
			// TODO: Finish all error messages
			var msg:String;
			switch (index) {
			case 1000:
				msg = "The system is out of memory.";
				break;
			case 1001:
				msg = "The method {0} is not implemented.";
				break;
			case 1002:
				msg = "Number.toPrecision has a range of 1 to 21. Number.toFixed and Number.toExponential have a range of 0 to 20. Specified value is not within expected range.";
				break;
			case 1007:
				msg = "Instantiation attempted on a non-constructor.";
				break;
			}

			if (msg == null)
				return System.String.Format ("#{0}", index);

			return System.String.Format ("#{0}: {1}", index, msg);
		}

		public static function throwError (type:Class, index:uint, ...rest) : *
		{
			throw new System.NotImplementedException ();
		}
	}
}

